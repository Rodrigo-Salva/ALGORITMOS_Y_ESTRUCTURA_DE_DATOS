def infix_to_postfix(tokens):
    """Convert infix expression to postfix notation using the shunting yard algorithm."""

    # Diccionario que define la precedencia de los operadores
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2}

    # Lista que almacenarÃ¡ el resultado en notaciÃ³n postfija
    output = []

    # Pila para guardar temporalmente operadores y parÃ©ntesis
    stack = []

    # Recorremos cada token del input
    for token in tokens:
        if token.isalnum():  # Si el token es un nÃºmero o una variable (operando)
            output.append(token)  # Se agrega directamente a la salida postfija
        elif token in precedence:  # Si es un operador (+, -, *, /)
            # Mientras haya operadores en la pila con mayor o igual precedencia
            while stack and stack[-1] != '(' and precedence.get(stack[-1], 0) >= precedence[token]:
                output.append(stack.pop())  # Se saca de la pila y se agrega al output
            stack.append(token)  # Finalmente, se coloca el operador actual en la pila
        elif token == '(':  # Si es un parÃ©ntesis de apertura
            stack.append(token)  # Se coloca en la pila para controlar agrupaciÃ³n
        elif token == ')':  # Si es un parÃ©ntesis de cierre
            # Sacamos operadores de la pila hasta encontrar el parÃ©ntesis de apertura
            while stack and stack[-1] != '(':
                output.append(stack.pop())  # Agregamos operadores al output
            stack.pop()  # Quitamos el '(' de la pila (no va al output)

    # Al final, vaciamos cualquier operador restante en la pila
    while stack:
        output.append(stack.pop())  # Todos los operadores se pasan al output

    return output  # Se devuelve la expresiÃ³n en notaciÃ³n postfija

# âœ… Test cases
# Test 1: Simple addition
# Input: 2 + 3
# Output: 2 3 +
print(infix_to_postfix(['2', '+', '3']) == ['2', '3', '+'])  # âž• Simple operation

# Test 2: Operator precedence
# Input: 2 + 3 * 4
# Output: 2 3 4 * +
print(infix_to_postfix(['2', '+', '3', '*', '4']) == ['2', '3', '4', '*', '+'])  # ðŸ“Š Precedence test

# Test 3: Parentheses override precedence
# Input: (2 + 3) * 4
# Output: 2 3 + 4 *
print(infix_to_postfix(['(', '2', '+', '3', ')', '*', '4']) == ['2', '3', '+', '4', '*'])  # ðŸ”— Parentheses

# Test 4: Complex expression
# Input: (1 + 2) * (3 - 4)
# Output: 1 2 + 3 4 - *
print(infix_to_postfix(['(', '1', '+', '2', ')', '*', '(', '3', '-', '4', ')']) == ['1', '2', '+', '3', '4', '-', '*'])  # ðŸ§® Complex

# Test 5: Multiple operators
# Input: a + b * c / d
# Output: a b c * d / +
print(infix_to_postfix(['a', '+', 'b', '*', 'c', '/', 'd']) == ['a', 'b', 'c', '*', 'd', '/', '+'])  # ðŸ”¤ Variables


