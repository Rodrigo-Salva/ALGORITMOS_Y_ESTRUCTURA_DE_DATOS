class MyCircularDeque:
    def __init__(self, k: int):
        self.capacity = k
        self.deque = [None] * k
        self.front = 0
        self.rear = 0
        self.count = 0

    def insertFront(self, value: int) -> bool:
        if self.isFull():
            return False
        self.front = (self.front - 1 + self.capacity) % self.capacity
        self.deque[self.front] = value
        self.count += 1
        return True

    def insertLast(self, value: int) -> bool:
        if self.isFull():
            return False
        self.deque[self.rear] = value
        self.rear = (self.rear + 1) % self.capacity
        self.count += 1
        return True

    def deleteFront(self) -> bool:
        if self.isEmpty():
            return False
        self.front = (self.front + 1) % self.capacity
        self.count -= 1
        return True

    def deleteLast(self) -> bool:
        if self.isEmpty():
            return False
        self.rear = (self.rear - 1 + self.capacity) % self.capacity
        self.count -= 1
        return True

    def getFront(self) -> int:
        if self.isEmpty():
            return -1
        return self.deque[self.front]

    def getRear(self) -> int:
        if self.isEmpty():
            return -1
        return self.deque[(self.rear - 1 + self.capacity) % self.capacity]

    def isEmpty(self) -> bool:
        return self.count == 0

    def isFull(self) -> bool:
        return self.count == self.capacity

def test_circular_deque():
    print("Running basic functionality test...")
    dq = MyCircularDeque(3)
    print("insertLast(1):", dq.insertLast(1))    # True
    print("insertLast(2):", dq.insertLast(2))    # True
    print("insertFront(3):", dq.insertFront(3))  # True
    print("insertFront(4):", dq.insertFront(4))  # False (deque is full)
    print("getRear():", dq.getRear())            # 2
    print("deleteLast():", dq.deleteLast())      # True
    print("getRear():", dq.getRear())            # 1
    print("deleteFront():", dq.deleteFront())    # True
    print("getFront():", dq.getFront())          # 1
    print("isEmpty():", dq.isEmpty())            # False
    print("deleteFront():", dq.deleteFront())    # True
    print("isEmpty():", dq.isEmpty())            # True
    print("deleteFront():", dq.deleteFront())    # False (already empty)


test_circular_deque()
