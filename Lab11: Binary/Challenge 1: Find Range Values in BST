class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def build_bst(values):
    if not values:
        return None

    root = TreeNode(values[0])
    for val in values[1:]:
        insert(root, val)
    return root

def insert(root, val):
    if val < root.val:
        if root.left is None:
            root.left = TreeNode(val)
        else:
            insert(root.left, val)
    else:
        if root.right is None:
            root.right = TreeNode(val)
        else:
            insert(root.right, val)

def range_query(root, min_val, max_val):
    result = []

    def inorder(node):
        if not node:
            return
        if node.val > min_val:
            inorder(node.left)
        if min_val <= node.val <= max_val:
            result.append(node.val)
        if node.val < max_val:
            inorder(node.right)

    inorder(root)
    return result


# Test 1: Normal range
print(range_query(build_bst([7, 3, 11, 1, 5, 9, 13]), 5, 10) == [5, 7, 9])  # ðŸŽ¯

# Test 2: Full range
print(range_query(build_bst([6, 4, 8, 2]), 1, 10) == [2, 4, 6, 8])  # ðŸ“Š

# Test 3: No values in range
print(range_query(build_bst([20, 10, 30]), 1, 5) == [])  # ðŸ“­

# Test 4: Single value
print(range_query(build_bst([15]), 10, 20) == [15])  # ðŸŒ±

# Test 5: Edge values
print(range_query(build_bst([15, 10, 20, 5, 25]), 10, 20) == [10, 15, 20])  # ðŸ”—
